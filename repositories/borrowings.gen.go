// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repositories

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ihksanghazi/api-library/models/domain"
)

func newBorrowing(db *gorm.DB, opts ...gen.DOOption) borrowing {
	_borrowing := borrowing{}

	_borrowing.borrowingDo.UseDB(db, opts...)
	_borrowing.borrowingDo.UseModel(&domain.Borrowing{})

	tableName := _borrowing.borrowingDo.TableName()
	_borrowing.ALL = field.NewAsterisk(tableName)
	_borrowing.ID = field.NewField(tableName, "id")
	_borrowing.BookID = field.NewField(tableName, "book_id")
	_borrowing.UserID = field.NewField(tableName, "user_id")
	_borrowing.LoanDate = field.NewTime(tableName, "loan_date")
	_borrowing.ReturnDate = field.NewTime(tableName, "return_date")
	_borrowing.Status = field.NewString(tableName, "status")
	_borrowing.Users = borrowingHasManyUsers{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Users", "domain.User"),
	}

	_borrowing.Books = borrowingHasManyBooks{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Books", "domain.Book"),
	}

	_borrowing.fillFieldMap()

	return _borrowing
}

type borrowing struct {
	borrowingDo

	ALL        field.Asterisk
	ID         field.Field
	BookID     field.Field
	UserID     field.Field
	LoanDate   field.Time
	ReturnDate field.Time
	Status     field.String
	Users      borrowingHasManyUsers

	Books borrowingHasManyBooks

	fieldMap map[string]field.Expr
}

func (b borrowing) Table(newTableName string) *borrowing {
	b.borrowingDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b borrowing) As(alias string) *borrowing {
	b.borrowingDo.DO = *(b.borrowingDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *borrowing) updateTableName(table string) *borrowing {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewField(table, "id")
	b.BookID = field.NewField(table, "book_id")
	b.UserID = field.NewField(table, "user_id")
	b.LoanDate = field.NewTime(table, "loan_date")
	b.ReturnDate = field.NewTime(table, "return_date")
	b.Status = field.NewString(table, "status")

	b.fillFieldMap()

	return b
}

func (b *borrowing) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *borrowing) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 8)
	b.fieldMap["id"] = b.ID
	b.fieldMap["book_id"] = b.BookID
	b.fieldMap["user_id"] = b.UserID
	b.fieldMap["loan_date"] = b.LoanDate
	b.fieldMap["return_date"] = b.ReturnDate
	b.fieldMap["status"] = b.Status

}

func (b borrowing) clone(db *gorm.DB) borrowing {
	b.borrowingDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b borrowing) replaceDB(db *gorm.DB) borrowing {
	b.borrowingDo.ReplaceDB(db)
	return b
}

type borrowingHasManyUsers struct {
	db *gorm.DB

	field.RelationField
}

func (a borrowingHasManyUsers) Where(conds ...field.Expr) *borrowingHasManyUsers {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a borrowingHasManyUsers) WithContext(ctx context.Context) *borrowingHasManyUsers {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a borrowingHasManyUsers) Session(session *gorm.Session) *borrowingHasManyUsers {
	a.db = a.db.Session(session)
	return &a
}

func (a borrowingHasManyUsers) Model(m *domain.Borrowing) *borrowingHasManyUsersTx {
	return &borrowingHasManyUsersTx{a.db.Model(m).Association(a.Name())}
}

type borrowingHasManyUsersTx struct{ tx *gorm.Association }

func (a borrowingHasManyUsersTx) Find() (result []*domain.User, err error) {
	return result, a.tx.Find(&result)
}

func (a borrowingHasManyUsersTx) Append(values ...*domain.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a borrowingHasManyUsersTx) Replace(values ...*domain.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a borrowingHasManyUsersTx) Delete(values ...*domain.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a borrowingHasManyUsersTx) Clear() error {
	return a.tx.Clear()
}

func (a borrowingHasManyUsersTx) Count() int64 {
	return a.tx.Count()
}

type borrowingHasManyBooks struct {
	db *gorm.DB

	field.RelationField
}

func (a borrowingHasManyBooks) Where(conds ...field.Expr) *borrowingHasManyBooks {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a borrowingHasManyBooks) WithContext(ctx context.Context) *borrowingHasManyBooks {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a borrowingHasManyBooks) Session(session *gorm.Session) *borrowingHasManyBooks {
	a.db = a.db.Session(session)
	return &a
}

func (a borrowingHasManyBooks) Model(m *domain.Borrowing) *borrowingHasManyBooksTx {
	return &borrowingHasManyBooksTx{a.db.Model(m).Association(a.Name())}
}

type borrowingHasManyBooksTx struct{ tx *gorm.Association }

func (a borrowingHasManyBooksTx) Find() (result []*domain.Book, err error) {
	return result, a.tx.Find(&result)
}

func (a borrowingHasManyBooksTx) Append(values ...*domain.Book) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a borrowingHasManyBooksTx) Replace(values ...*domain.Book) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a borrowingHasManyBooksTx) Delete(values ...*domain.Book) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a borrowingHasManyBooksTx) Clear() error {
	return a.tx.Clear()
}

func (a borrowingHasManyBooksTx) Count() int64 {
	return a.tx.Count()
}

type borrowingDo struct{ gen.DO }

type IBorrowingDo interface {
	gen.SubQuery
	Debug() IBorrowingDo
	WithContext(ctx context.Context) IBorrowingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBorrowingDo
	WriteDB() IBorrowingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBorrowingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBorrowingDo
	Not(conds ...gen.Condition) IBorrowingDo
	Or(conds ...gen.Condition) IBorrowingDo
	Select(conds ...field.Expr) IBorrowingDo
	Where(conds ...gen.Condition) IBorrowingDo
	Order(conds ...field.Expr) IBorrowingDo
	Distinct(cols ...field.Expr) IBorrowingDo
	Omit(cols ...field.Expr) IBorrowingDo
	Join(table schema.Tabler, on ...field.Expr) IBorrowingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBorrowingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBorrowingDo
	Group(cols ...field.Expr) IBorrowingDo
	Having(conds ...gen.Condition) IBorrowingDo
	Limit(limit int) IBorrowingDo
	Offset(offset int) IBorrowingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBorrowingDo
	Unscoped() IBorrowingDo
	Create(values ...*domain.Borrowing) error
	CreateInBatches(values []*domain.Borrowing, batchSize int) error
	Save(values ...*domain.Borrowing) error
	First() (*domain.Borrowing, error)
	Take() (*domain.Borrowing, error)
	Last() (*domain.Borrowing, error)
	Find() ([]*domain.Borrowing, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.Borrowing, err error)
	FindInBatches(result *[]*domain.Borrowing, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*domain.Borrowing) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBorrowingDo
	Assign(attrs ...field.AssignExpr) IBorrowingDo
	Joins(fields ...field.RelationField) IBorrowingDo
	Preload(fields ...field.RelationField) IBorrowingDo
	FirstOrInit() (*domain.Borrowing, error)
	FirstOrCreate() (*domain.Borrowing, error)
	FindByPage(offset int, limit int) (result []*domain.Borrowing, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBorrowingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b borrowingDo) Debug() IBorrowingDo {
	return b.withDO(b.DO.Debug())
}

func (b borrowingDo) WithContext(ctx context.Context) IBorrowingDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b borrowingDo) ReadDB() IBorrowingDo {
	return b.Clauses(dbresolver.Read)
}

func (b borrowingDo) WriteDB() IBorrowingDo {
	return b.Clauses(dbresolver.Write)
}

func (b borrowingDo) Session(config *gorm.Session) IBorrowingDo {
	return b.withDO(b.DO.Session(config))
}

func (b borrowingDo) Clauses(conds ...clause.Expression) IBorrowingDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b borrowingDo) Returning(value interface{}, columns ...string) IBorrowingDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b borrowingDo) Not(conds ...gen.Condition) IBorrowingDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b borrowingDo) Or(conds ...gen.Condition) IBorrowingDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b borrowingDo) Select(conds ...field.Expr) IBorrowingDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b borrowingDo) Where(conds ...gen.Condition) IBorrowingDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b borrowingDo) Order(conds ...field.Expr) IBorrowingDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b borrowingDo) Distinct(cols ...field.Expr) IBorrowingDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b borrowingDo) Omit(cols ...field.Expr) IBorrowingDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b borrowingDo) Join(table schema.Tabler, on ...field.Expr) IBorrowingDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b borrowingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBorrowingDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b borrowingDo) RightJoin(table schema.Tabler, on ...field.Expr) IBorrowingDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b borrowingDo) Group(cols ...field.Expr) IBorrowingDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b borrowingDo) Having(conds ...gen.Condition) IBorrowingDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b borrowingDo) Limit(limit int) IBorrowingDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b borrowingDo) Offset(offset int) IBorrowingDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b borrowingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBorrowingDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b borrowingDo) Unscoped() IBorrowingDo {
	return b.withDO(b.DO.Unscoped())
}

func (b borrowingDo) Create(values ...*domain.Borrowing) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b borrowingDo) CreateInBatches(values []*domain.Borrowing, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b borrowingDo) Save(values ...*domain.Borrowing) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b borrowingDo) First() (*domain.Borrowing, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Borrowing), nil
	}
}

func (b borrowingDo) Take() (*domain.Borrowing, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Borrowing), nil
	}
}

func (b borrowingDo) Last() (*domain.Borrowing, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Borrowing), nil
	}
}

func (b borrowingDo) Find() ([]*domain.Borrowing, error) {
	result, err := b.DO.Find()
	return result.([]*domain.Borrowing), err
}

func (b borrowingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.Borrowing, err error) {
	buf := make([]*domain.Borrowing, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b borrowingDo) FindInBatches(result *[]*domain.Borrowing, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b borrowingDo) Attrs(attrs ...field.AssignExpr) IBorrowingDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b borrowingDo) Assign(attrs ...field.AssignExpr) IBorrowingDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b borrowingDo) Joins(fields ...field.RelationField) IBorrowingDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b borrowingDo) Preload(fields ...field.RelationField) IBorrowingDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b borrowingDo) FirstOrInit() (*domain.Borrowing, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Borrowing), nil
	}
}

func (b borrowingDo) FirstOrCreate() (*domain.Borrowing, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Borrowing), nil
	}
}

func (b borrowingDo) FindByPage(offset int, limit int) (result []*domain.Borrowing, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b borrowingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b borrowingDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b borrowingDo) Delete(models ...*domain.Borrowing) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *borrowingDo) withDO(do gen.Dao) *borrowingDo {
	b.DO = *do.(*gen.DO)
	return b
}
